let player;
let enemies = [];
let score = 0;
let hearts = 2;
let gameIsOver = false;
let gameIsCleared = false;
let goalPosition = 1500; // ゴールの位置を遠くに設定
let gravity = 0.5;
let platforms = [];
let holes = [];

function setup() {
  createCanvas(800, 400);
  player = new Player();
  platforms.push(new Platform(300, 300, 200, 20)); // 例としてプラットフォームを追加
  holes.push(new Hole(600, 350, 100)); // 例として穴を追加
}

function draw() {
  background(220);
  translate(-player.x + 100, 0); // プレイヤーが常に画面の左側にいるようにする

  // ステージの描画
  drawGround();
  for (let plat of platforms) {
    plat.display();
  }
  for (let hole of holes) {
    hole.display();
  }

  // プレイヤーと敵の処理
  if (!gameIsOver && !gameIsCleared) {
    player.display();
    player.move();
    player.applyGravity();
    handleEnemies();
    checkForGoal();function checkForGoal() {
  if (player.x >= goalPosition) {
    gameIsCleared = true;
    noLoop(); // ゲームループを停止
  }
}

  } else if (gameIsOver) {
    displayGameOver();
  } else if (gameIsCleared) {
    displayGameCleared();
  }

  // ハートとスコアの表示はtranslateの影響を受けないように
  resetMatrix();
  displayHearts();
  displayScore();
}

function keyPressed() {
  if (keyCode === RIGHT_ARROW) {
    player.setDirection(1);
  } else if (keyCode === LEFT_ARROW) {
    player.setDirection(-1);
  } else if (keyCode === UP_ARROW) {
    player.jump();
  }
  if (keyCode === ENTER) {
    player.swingSword();
  }
}

function keyReleased() {
  if (keyCode === RIGHT_ARROW || keyCode === LEFT_ARROW) {
    player.setDirection(0);
  }
}

// 地面を描画する関数
function drawGround() {
  fill(100, 50, 50);
  rect(player.x - 100, 350, width * 4, 50); // 地面をプレイヤーの位置に応じて拡張
}

// 敵の処理を行う関数
function handleEnemies() {
  if (frameCount % 90 === 0) {
    let enemyX = player.x + random(width, width * 2);
    enemies.push(new Enemy(enemyX, 300));
  }

  for (let i = enemies.length - 1; i >= 0; i--) {
    enemies[i].display();
    enemies[i].update();
    if (player.hit(enemies[i])) {
      score++;
      enemies.splice(i, 1);
    } else if (enemies[i].hitsPlayer(player)) {
      enemies.splice(i, 1);
      hearts--;
      if (hearts <= 0) {
        gameIsOver = true;
      }
    }
  }
}

// ハートを表示する関数
function displayHearts() {
  for (let i = 0; i < hearts; i++) {
    fill(255, 0, 0);
    noStroke();
    beginShape();
    vertex(50 + i * 30, 30);
    bezierVertex(50 + i * 30 - 5, 30 - 15, 50 + i * 30 - 25, 30 + 10, 50 + i * 30, 30 + 25);
    bezierVertex(50 + i * 30 + 25, 30 + 10, 50 + i * 30 + 5, 30 - 15, 50 + i * 30, 30);
    endShape(CLOSE);
  }
}

// スコアを表示する関数
function displayScore() {
  fill(0);
  textSize(16);
  text('Score: ' + score, 10, 60);
}

// ゴールを表示する関数
function displayGoal() {
  fill(0, 255, 0);
    rect(goalPosition, 350, 20, 50); // ゴールの描画
  }

  // ゲームオーバー画面の表示
  function displayGameOver() {
    resetMatrix();
    textSize(32);
    fill(255, 0, 0);
    text('Game Over!', width / 2, height / 2);
  }

  // ゲームクリア画面の表示
  function displayGameCleared() {
    resetMatrix();
    textSize(32);
    fill(0, 255, 0);
    text('Game Cleared!', width / 2, height / 2);
  }

  // プレイヤーのクラス
  class Player {
    constructor() {
      this.x = 100;
      this.y = 300;
      this.size = 50;
      this.direction = 0;
      this.isSwinging = false;
      this.velocityY = 0;
      this.onGround = true;
    }

    display() {
      // プレイヤーを棒人間で表示
      stroke(0);
      strokeWeight(2);
      // 頭
      ellipse(this.x, this.y - 25, 25, 25);
      // 体
      line(this.x, this.y - 12, this.x, this.y + 10);
      // 脚
      line(this.x, this.y + 10, this.x - 10, this.y + 30);
      line(this.x, this.y + 10, this.x + 10, this.y + 30);
      // 腕
      line(this.x, this.y - 5, this.x + 10, this.y);
      if (this.isSwinging) {
        // 剣を振るエフェクト
        line(this.x + 10, this.y, this.x + 30, this.y - 10);
      } else {
        line(this.x, this.y - 5, this.x - 10, this.y);
      }
    }

    move() {
      this.x += this.direction * 5;
    }

    applyGravity() {
      if (!this.onGround) {
        this.velocityY += gravity;
        this.y += this.velocityY;
        if (this.y >= 300) {
          this.y = 300;
          this.velocityY = 0;
          this.onGround = true;
        }
      }
    }

    jump() {
      if (this.onGround) {
        this.velocityY = -10;
        this.onGround = false;
      }
    }

    setDirection(dir) {
      this.direction = dir;
    }

    swingSword() {
      if (!this.isSwinging) {
        this.isSwinging = true;
        setTimeout(() => {
          this.isSwinging = false;
        }, 250); // 250ミリ秒後に攻撃を終了
      }
    }

    hit(enemy) {
      return this.isSwinging && dist(this.x + 20, this.y, enemy.x, enemy.y) < this.size;
    }
  }

  // 敵のクラス
  class Enemy {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.size = 30;
      this.speed = 3;
    }

    display() {
      fill(150);
      ellipse(this.x, this.y, this.size * 2, this.size * 2);
    }

    update() {
      this.x -= this.speed;
    }

    hitsPlayer(player) {
      return dist(this.x, this.y, player.x, player.y) < this.size + player.size / 2;
    }
  }

  // プラットフォームのクラス
  class Platform {
    constructor(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    }

    display() {
      fill(100);
      rect(this.x, this.y, this.width, this.height);
    }
  }

  // 穴のクラス
  class Hole {
    constructor(x, y, width) {
      this.x = x;
      this.y = y;
      this.width =width;
      }

      display() {
        fill(50);
        rect(this.x, this.y, this.width, 50);
      }

      checkPlayerCollision(player) {
        if (player.x > this.x && player.x < this.x + this.width && player.y >= this.y) {
          return true;
        }
        return false;
      }
    }




